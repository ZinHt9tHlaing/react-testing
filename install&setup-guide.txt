# TESTING SETUP GUIDE

This project uses Vitest together with React Testing Library to test React components in a browser-like environment.
Follow the steps below to understand and run tests.

---

1. DEPENDENCIES

---

We use these testing tools:

* vitest → the main testing framework (similar to Jest, but faster)
* jsdom → simulates a browser environment so React components can run in tests
* @testing-library/react → lets us render and test React components
* @testing-library/jest-dom → adds helpful matchers like toBeInTheDocument()
* @testing-library/user-event → simulates real user interactions (typing, clicking, etc.)

Install them with:
npm i --save-dev vitest jsdom @testing-library/jest-dom @testing-library/react @testing-library/user-event

---

2. CONFIGURATION

---

We configure Vitest in vitest.config.ts (or .js):

import { defineConfig } from "vitest/config";

export default defineConfig({
test: {
globals: true,             // lets us use describe, it, expect globally
environment: "jsdom",      // provides a fake browser environment
setupFiles: "./tests/setup" // runs the setup script before each test
},
});

---

3. TEST SETUP

---

The setup file (tests/setup.ts) runs before each test file.
It ensures that every test starts fresh:

import { afterEach, vi } from "vitest";
import { cleanup } from "@testing-library/react";

// Reset test environment after every test
afterEach(() => {
cleanup();          // removes leftover DOM from previous test
vi.clearAllMocks(); // clears all mock functions between tests
});

---

4. WRITING TESTS

---

Example test file: Button.test.tsx

import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import Button from "./Button";

describe("Button component", () => {
it("renders the button with correct text", () => {
render(<Button label="Click me" />);
expect(screen.getByText("Click me")).toBeInTheDocument();
});

it("handles user click", async () => {
const onClick = vi.fn();
render(<Button label="Click me" onClick={onClick} />);

```
await userEvent.click(screen.getByText("Click me"));
expect(onClick).toHaveBeenCalledTimes(1);
```

});
});

---

5. RUNNING TESTS

---

Run all tests:
npm run test

Run in watch mode (auto re-runs when files change):
npm run test -- --watch

Run a specific file:
npx vitest run src/components/Button.test.tsx

---

## SUMMARY

* Vitest is the test runner
* jsdom gives us a fake browser
* Testing Library makes it easy to test React components like real users interact with them
* Setup file keeps the test environment clean between runs

With this setup, your tests are isolated, reliable, and simulate real-world usage.
